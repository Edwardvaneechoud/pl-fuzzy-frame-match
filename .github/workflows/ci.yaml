name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
        shell: bash # Explicitly use bash shell

      - name: Run pre-commit checks
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: poetry run pre-commit run --all-files
        # No shell change needed, as it's ubuntu-only and default is bash.
        # If it were to run on Windows and fail, add shell: bash here too.

      - name: Run tests with coverage
        run: poetry run pytest --cov=pl_fuzzy_frame_match --cov-report=xml --cov-report=term-missing -v
        shell: bash # Explicitly use bash shell

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
        # Default shell on Ubuntu is bash, so no change strictly needed here,
        # but shell: bash can be added for consistency if desired.

      - name: Run Ruff linting
        run: poetry run ruff check .
        # Default shell on Ubuntu is bash.

      - name: Run Ruff formatting check
        run: poetry run ruff format --check .
        # Default shell on Ubuntu is bash.

      - name: Run MyPy type checking
        run: poetry run mypy pl_fuzzy_frame_match/
        # Default shell on Ubuntu is bash.

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3

      - name: Build package
        run: poetry build
        # Default shell on Ubuntu is bash.

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    name: Release to PyPI
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write # For trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: List files to be published
        run: ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true